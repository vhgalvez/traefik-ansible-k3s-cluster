# playbooks/3-seal-traefik-auth-secret.yml
# ===============================================================
# 🔐 FASE 1C: Crear y cifrar el Secret de autenticación básica
# - Genera hash htpasswd
# - Renderiza el Secret plano
# - Lo cifra con kubeseal para uso en ArgoCD o GitOps seguro
# ===============================================================

- name: 🔐 Generar y cifrar Secret para Traefik Dashboard
  hosts: localhost
  gather_facts: false

  vars_files:
    - ../vars/main.yml

  vars:
    kubeconfig_path: "/home/victory/.kube/config"
    kubeseal_path: "/usr/local/bin/kubeseal"
    kubectl_path: "/usr/local/bin/kubectl"
    python_bin: "/usr/bin/python3"
    files_dir: "{{ playbook_dir }}/files"
    rendered_secret_path: "{{ files_dir }}/traefik-dashboard-secret.yaml"
    sealed_secret_path: "{{ files_dir }}/traefik-dashboard-sealed.yaml"

  tasks:

    - name: 📁 Crear directorio para secrets (si no existe)
      file:
        path: "{{ files_dir }}"
        state: directory
        mode: '0755'

    - name: 🔐 Generar hash htpasswd para autenticación básica
      command: >
        {{ python_bin }} -c "import crypt; print('{{ traefik_auth_user }}:' + crypt.crypt('{{ traefik_auth_pass }}', crypt.mksalt(crypt.METHOD_MD5)))"
      register: traefik_htpasswd_output
      changed_when: false

    - name: 📄 Renderizar plantilla de Secret YAML (plano)
      template:
        src: ../templates/secrets/traefik-dashboard-secret.yaml.j2
        dest: "{{ rendered_secret_path }}"
      vars:
        traefik_basic_auth: "{{ traefik_htpasswd_output.stdout }}"

    - name: 🔐 Cifrar el Secret con kubeseal
      shell: >
        {{ kubeseal_path }}
        --controller-name sealed-secrets-controller
        --controller-namespace {{ traefik_namespace }}
        --format yaml
        < "{{ rendered_secret_path }}" > "{{ sealed_secret_path }}"
      args:
        executable: /bin/bash
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      changed_when: false