# playbooks/01_generate-ca-and-wildcard.yml
# =========================================
#  Genera una autoridad certificadora (CA)
#  raíz autofirmada (RootCA) si no existe,
#  y un certificado wildcard firmado para
#  *.socialdevs.site con su clave privada.
#
#  ✔ CA: ca-root.crt y ca-root.key
#  ✔ Wildcard: wildcard-socialdevs-tls.crt y .key
#  ✔ SANs incluidos (*.socialdevs.site, grafana, jenkins, etc.)
#  ✔ Compatible para importar la CA en Firefox/Chrome
#
#  ➜ Salida en: files/certs/
#  ➜ Útil para desarrollo, clusters internos o laboratorios
# =========================================

- name: 🛡️ Generar CA raíz y certificado wildcard firmado
  hosts: localhost
  gather_facts: false

  vars_files:
    - ../vars/main.yml

  vars:
    certs_dir: "{{ playbook_dir }}/files/certs"
    ca_key: ca-root.key
    ca_csr: ca-root.csr
    ca_crt: ca-root.crt
    ca_ext: ca-ext.cnf
    srv_key: wildcard-socialdevs-tls.key
    srv_csr: wildcard-socialdevs-tls.csr
    srv_crt: wildcard-socialdevs-tls.crt

    country: ES
    state: Madrid
    locality: Madrid
    organization: FlatcarMicroCloud
    common_name: "*.socialdevs.site"

    extra_sans:
      - socialdevs.site
      - grafana.socialdevs.site
      - jenkins.socialdevs.site
      - argocd.socialdevs.site
      - prometheus.socialdevs.site
      - longhorn.socialdevs.site
      - traefik.socialdevs.site

    force_recreate: false

  tasks:
    - name: 📁 Crear directorio de certificados
      file:
        path: "{{ certs_dir }}"
        state: directory
        mode: "0755"

    - name: 🔐 Crear clave privada de la CA
      community.crypto.openssl_privatekey:
        path: "{{ certs_dir }}/{{ ca_key }}"
        size: 4096
        type: RSA
        force: "{{ force_recreate | bool }}"

    - name: 📝 Crear CSR de la CA
      community.crypto.openssl_csr:
        path: "{{ certs_dir }}/{{ ca_csr }}"
        privatekey_path: "{{ certs_dir }}/{{ ca_key }}"
        common_name: "RootCA"
        country_name: "{{ country }}"
        state_or_province_name: "{{ state }}"
        locality_name: "{{ locality }}"
        organization_name: "{{ organization }}"
        force: "{{ force_recreate | bool }}"

    - name: 🛠️ Generar fichero de extensiones para la CA
      copy:
        dest: "{{ certs_dir }}/{{ ca_ext }}"
        content: |
          basicConstraints=critical,CA:TRUE
          keyUsage=critical,keyCertSign,cRLSign
          subjectKeyIdentifier=hash
          authorityKeyIdentifier=keyid:always,issuer:always
        mode: "0644"

    - name: 📜 Crear certificado autofirmado de la CA con extensiones
      command: >
        openssl x509
          -req
          -in {{ certs_dir }}/{{ ca_csr }}
          -signkey {{ certs_dir }}/{{ ca_key }}
          -days 3650
          -extfile {{ certs_dir }}/{{ ca_ext }}
          -out {{ certs_dir }}/{{ ca_crt }}
      args:
        creates: "{{ certs_dir }}/{{ ca_crt }}"

    - name: 🧹 Eliminar fichero de extensiones de la CA
      file:
        path: "{{ certs_dir }}/{{ ca_ext }}"
        state: absent

    - name: 🔑 Crear clave privada para el wildcard
      community.crypto.openssl_privatekey:
        path: "{{ certs_dir }}/{{ srv_key }}"
        size: 2048
        type: RSA
        force: "{{ force_recreate | bool }}"

    - name: 📝 Crear CSR para el wildcard (*.socialdevs.site) con SANs
      community.crypto.openssl_csr:
        path: "{{ certs_dir }}/{{ srv_csr }}"
        privatekey_path: "{{ certs_dir }}/{{ srv_key }}"
        common_name: "{{ common_name }}"
        subject_alt_name: >-
          {{ ['DNS:' + common_name] + extra_sans | map('regex_replace', '^(.*)$', 'DNS:\\1') | list }}
        force: "{{ force_recreate | bool }}"

    - name: ✅ Firmar el CSR del wildcard con la CA raíz
      community.crypto.x509_certificate:
        path: "{{ certs_dir }}/{{ srv_crt }}"
        csr_path: "{{ certs_dir }}/{{ srv_csr }}"
        provider: ownca
        ownca_path: "{{ certs_dir }}/{{ ca_crt }}"
        ownca_privatekey_path: "{{ certs_dir }}/{{ ca_key }}"
        ownca_not_after: "+3650d"
        force: "{{ force_recreate | bool }}"

    - name: ⚙️ Ajustar permisos clave privada de la CA
      file:
        path: "{{ certs_dir }}/{{ ca_key }}"
        mode: "0600"

    - name: ⚙️ Ajustar permisos certificado de la CA
      file:
        path: "{{ certs_dir }}/{{ ca_crt }}"
        mode: "0644"

    - name: ⚙️ Ajustar permisos clave privada del wildcard
      file:
        path: "{{ certs_dir }}/{{ srv_key }}"
        mode: "0600"

    - name: ⚙️ Ajustar permisos certificado wildcard
      file:
        path: "{{ certs_dir }}/{{ srv_crt }}"
        mode: "0644"

    - name: 🧹 Borrar CSRs temporales
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ certs_dir }}/{{ ca_csr }}"
        - "{{ certs_dir }}/{{ srv_csr }}"
      when: not force_recreate | bool

    - name: 📄 Listar ficheros finales
      shell: ls -1 "{{ certs_dir }}"
      register: certs_out

    - name: 📤 Mostrar listado de archivos generados
      debug:
        msg: "{{ certs_out.stdout_lines }}"