# playbooks/2-generate-internal-tls-cert.yml
# ===============================================================
# 🔐 Crear Secret TLS autofirmado para dominios internos
# - Secret: wildcard-socialdevs-tls
# - Namespace: kube-system (global para todos los servicios)
# - Fuente: archivos CRT/KEY generados localmente
# ===============================================================

- name: 🔐 Crear Secret TLS autofirmado para dominios internos
  hosts: localhost
  gather_facts: false

  vars_files:
    - ../vars/main.yml

  vars:
    certs_dir: "{{ playbook_dir }}/files/certs"
    cert_name: "wildcard-socialdevs-tls"
    secret_name: "wildcard-socialdevs-tls"
    namespace: "kube-system"  # ⚠️ Debe estar en kube-system para uso global con TLSStore
    rendered: "{{ playbook_dir }}/files/internal-tls-secret.yaml"
    kubeconfig: "/home/victory/.kube/config"

  tasks:

    - name: 📁 Asegurar permisos adecuados en .crt y .key
      ansible.builtin.file:
        path: "{{ certs_dir }}/{{ item }}"
        mode: "0644"
      loop:
        - "{{ cert_name }}.crt"
        - "{{ cert_name }}.key"
      ignore_errors: true

    - name: ✅ Validar existencia de archivos .crt y .key
      stat:
        path: "{{ certs_dir }}/{{ cert_name }}.{{ item }}"
      loop: ["crt", "key"]
      register: stat_results

    - name: 🚫 Detener si falta algún archivo de certificado
      fail:
        msg: "❌ Falta el archivo requerido: {{ item.stat.path }}"
      when: not item.stat.exists
      loop: "{{ stat_results.results }}"

    - name: 🔐 Leer archivos .crt y .key y codificar en base64
      slurp:
        src: "{{ certs_dir }}/{{ cert_name }}.{{ item }}"
      loop: ["crt", "key"]
      register: slurp_results

    - name: 📝 Renderizar plantilla del Secret TLS
      template:
        src: "../templates/secrets/tls-secret.yaml.j2"
        dest: "{{ rendered }}"
      vars:
        cert_base64: "{{ slurp_results.results[0].content }}"
        key_base64: "{{ slurp_results.results[1].content }}"
        secret_name: "{{ secret_name }}"
        traefik_namespace: "{{ namespace }}"  # 🌍 Se utiliza para el Secret y para TLSStore

    - name: 🚀 Aplicar Secret TLS en el clúster Kubernetes
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        definition: "{{ lookup('file', rendered) }}"
        state: present