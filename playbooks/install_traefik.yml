---
# playbooks/install_traefik.yml
- name: Instalar Traefik con Helm dentro del clúster K3s
  hosts: controller
  gather_facts: false
  vars:
    traefik_namespace: kube-system
    traefik_release_name: traefik
    traefik_chart_version: "23.1.0"
    traefik_values_file: "/tmp/traefik-values.yaml"
    traefik_dashboard_user: admin
    traefik_dashboard_pass: MiPasswordSegura

  tasks:
    - name: Asegurarse de que el directorio files/ exista localmente
      delegate_to: localhost
      run_once: true
      file:
        path: "{{ playbook_dir }}/files"
        state: directory
        mode: "0755"

    - name: Generar hash htpasswd localmente con Python
      delegate_to: localhost
      run_once: true
      command: >
        python3 -c "import crypt; print('{{ traefik_dashboard_user }}:' + crypt.crypt('{{ traefik_dashboard_pass }}', crypt.mksalt(crypt.METHOD_MD5)))"
      register: htpasswd_output

    - name: Guardar hash htpasswd en archivo local
      delegate_to: localhost
      run_once: true
      copy:
        dest: "{{ playbook_dir }}/files/htpasswd.txt"
        content: "{{ htpasswd_output.stdout }}"

    - name: Desinstalar Traefik instalado por defecto en K3s (si existe)
      raw: |
        kubectl delete helmchart traefik -n kube-system || true
        kubectl delete deployment traefik -n kube-system || true

    - name: Asegurarse de que el repo de Traefik esté añadido
      raw: |
        helm repo add traefik https://traefik.github.io/charts || true
        helm repo update

    - name: Plantilla del values.yaml para Traefik
      template:
        src: ../templates/traefik/values.yaml.j2
        dest: "{{ traefik_values_file }}"

    - name: Crear secret de autenticación básica para dashboard de Traefik
      raw: |
        echo "{{ htpasswd_output.stdout | b64encode }}" | base64 -d > /tmp/users.txt &&
        kubectl create secret generic traefik-dashboard-auth \
          --namespace {{ traefik_namespace }} \
          --from-file=users=/tmp/users.txt \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Instalar Traefik con Helm en el clúster
      raw: |
        helm upgrade --install {{ traefik_release_name }} traefik/traefik \
          --namespace {{ traefik_namespace }} \
          --create-namespace=false \
          --version {{ traefik_chart_version }} \
          --values {{ traefik_values_file }}

    - name: Crear Middleware de autenticación básica para dashboard
      raw: |
        cat <<EOF | kubectl apply -f -
        apiVersion: traefik.containo.us/v1alpha1
        kind: Middleware
        metadata:
          name: dashboard-auth
          namespace: {{ traefik_namespace }}
        spec:
          basicAuth:
            secret: traefik-dashboard-auth
        EOF

    - name: Crear IngressRoute para acceder al dashboard protegido
      raw: |
        cat <<EOF | kubectl apply -f -
        apiVersion: traefik.containo.us/v1alpha1
        kind: IngressRoute
        metadata:
          name: traefik-dashboard
          namespace: {{ traefik_namespace }}
        spec:
          entryPoints:
            - websecure
          routes:
            - match: PathPrefix(\`/dashboard\`) || PathPrefix(\`/api\`)
              kind: Rule
              services:
                - name: api@internal
                  kind: TraefikService
              middlewares:
                - name: dashboard-auth
          tls:
            certResolver: selfsigned
        EOF

    - name: Esperar a que el pod de Traefik esté corriendo
      raw: |
        for i in $(seq 1 10); do
          kubectl get pods -n {{ traefik_namespace }} -l app.kubernetes.io/name=traefik | grep Running && exit 0
          sleep 10
        done
        echo "❌ Timeout esperando que Traefik esté en estado Running"; exit 1