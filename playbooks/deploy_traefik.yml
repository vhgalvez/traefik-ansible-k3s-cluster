# playbooks/deploy_traefik.yml
# =========================================================================
# 🚀 PIPELINE COMPLETO
#  1A  Certificados             → 1-generate-selfsigned-certs.yml
#  1B  Secret TLS (wildcard)    → 2-generate-internal-tls-cert.yml
#  1C  PVC Longhorn + copiado   → 3-create-cert-pvc.yml
#  1D  Secret basic-auth sellado→ 4-seal-traefik-auth-secret.yml
#   2  Helm Traefik (values_pvc)→ 5-install-traefik-dashboard.yml
#   3  Smoke-test de despliegue → bloque final de verificación
# =========================================================================

---
# Verificar que kubectl y helm estén instalados
- name: Verificar que kubectl esté instalado
  stat:
    path: "/usr/local/bin/kubectl"
  register: kubectl_check
  failed_when: false
  changed_when: false

- name: Abortamos si kubectl no está instalado
  fail:
    msg: "❌ kubectl no está instalado. Por favor, instálalo."
  when: not kubectl_check.stat.exists

- name: Verificar que helm esté instalado
  stat:
    path: "/usr/local/bin/helm"
  register: helm_check
  failed_when: false
  changed_when: false

- name: Abortamos si helm no está instalado
  fail:
    msg: "❌ helm no está instalado. Por favor, instálalo."
  when: not helm_check.stat.exists

# 1A – Generar *.crt / *.key autofirmados
- import_playbook: 1-generate-selfsigned-certs.yml

# 1B – Crear Secret TLS wildcard-socialdevs-tls en kube-system
- import_playbook: 2-generate-internal-tls-cert.yml

# 1C – Crear PVC Longhorn y copiar los ficheros .crt/.key al volumen
- import_playbook: 3-create-cert-pvc.yml

# 1D – Generar y sellar el Secret de basic-auth para el dashboard
- import_playbook: 4-seal-traefik-auth-secret.yml

# 2 – Instalar Traefik con Helm usando values_pvc.yaml (monta el PVC)
- import_playbook: 5-install-traefik-dashboard.yml

# 3 – Verificación rápida del despliegue
- name: ✅ Verificar despliegue final de Traefik
  hosts: localhost
  gather_facts: false

  vars_files:
    - ../vars/main.yml

  vars:
    kubeconfig_path: "/home/victory/.kube/config"
    kubectl_bin_path: "/usr/local/bin/kubectl"

  tasks:
    - name: ⏳ Esperar a que los pods Traefik estén Ready
      shell: >
        {{ kubectl_bin_path }} -n {{ traefik_namespace }} wait --for=condition=Ready pod
        -l app.kubernetes.io/name={{ traefik_release_name }} --timeout=120s
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      changed_when: false

    - name: 🔍 Listar pods Traefik
      shell: >
        {{ kubectl_bin_path }} get pods -n {{ traefik_namespace }}
        -l app.kubernetes.io/name={{ traefik_release_name }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: traefik_status
      changed_when: false

    - name: 🧾 Mostrar estado de pods
      debug:
        var: traefik_status.stdout_lines

    - name: 🌐 Probar acceso al dashboard (200 / 302 / 401 aceptables)
      shell: >
        curl -k -u {{ traefik_auth_user }}:{{ traefik_auth_pass }}
        https://{{ internal_domain }}/dashboard/
        --max-time 10 --silent --output /dev/null --write-out '%{http_code}'
      register: dashboard_http
      changed_when: false
      failed_when: dashboard_http.stdout not in ["200", "302", "401"]

    - name: ✅ Resultado de la prueba de dashboard
      debug:
        msg: "Código HTTP devuelto por el dashboard → {{ dashboard_http.stdout }}"