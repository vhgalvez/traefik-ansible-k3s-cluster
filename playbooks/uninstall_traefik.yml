# playbooks\uninstall_traefik.yml
---
- name: 🥹 Desinstalar Traefik del clúster K3s
  hosts: localhost
  gather_facts: false

  vars_files:
    - ../vars/main.yml

  vars:
    kubeconfig_path: "/home/victory/.kube/config"
    helm_bin_path: "/usr/local/bin/helm"
    kubectl_path: "/usr/local/bin/kubectl"
    env_path: "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

  tasks:
    - name: ❌ Desinstalar Traefik (Helm)
      shell: >
        {{ helm_bin_path }} uninstall {{ traefik_release_name }} --namespace {{ traefik_namespace }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
        PATH: "{{ env_path }}"
      ignore_errors: true

    - name: ❌ Eliminar Sealed Secret del Dashboard
      shell: >
        {{ kubectl_path }} delete sealedsecret {{ traefik_dashboard_secret_name }} -n {{ traefik_namespace }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      ignore_errors: true

    - name: ❌ Eliminar Secret plano del Dashboard (fallback)
      shell: >
        {{ kubectl_path }} delete secret {{ traefik_dashboard_secret_name }} -n {{ traefik_namespace }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      ignore_errors: true

    - name: ❌ Eliminar ConfigMap de Traefik (si existe)
      shell: >
        {{ kubectl_path }} delete configmap traefik-config -n {{ traefik_namespace }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      ignore_errors: true

    - name: ❌ Eliminar IngressRoute del Dashboard (si existe)
      shell: >
        {{ kubectl_path }} delete ingressroute traefik-dashboard -n {{ traefik_namespace }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      ignore_errors: true

    - name: ❌ Eliminar PersistentVolumeClaims (PVCs) usados por Traefik (si se crearon)
      shell: >
        {{ kubectl_path }} delete pvc -n {{ traefik_namespace }} --selector=app=traefik
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      ignore_errors: true

    - name: ❌ Eliminar Persistencia de Traefik (si fue habilitada)
      shell: >
        rm -rf /data/traefik
      when: traefik_storage_enabled | bool
      ignore_errors: true

    - name: ✅ Verificar que todos los recursos de Traefik han sido eliminados
      shell: >
        {{ kubectl_path }} get all -n {{ traefik_namespace }} || echo "Todos los recursos de Traefik han sido eliminados."
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"