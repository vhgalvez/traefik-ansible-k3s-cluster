# playbooks/5-install-traefik-dashboard.yml
# =========================================================
# 🚀 Instalar Traefik con Dashboard interno protegido
# =========================================================
- name: 🚀 Instalar Traefik con Dashboard interno protegido
  hosts: localhost
  gather_facts: false
  become: false

  vars_files:
    - ../vars/main.yml

  vars:
    kubeconfig_path: "/home/victory/.kube/config"
    helm_bin_path: "/usr/local/bin/helm"
    kubectl_bin_path: "/usr/local/bin/kubectl"
    env_path: "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
    files_dir: "{{ playbook_dir }}/files"

    traefik_values_template: "../templates/traefik/values_pvc.yaml.j2"
    traefik_values_file: "{{ files_dir }}/traefik-values.yaml"
    middleware_template: "../templates/traefik/traefik-dashboard-middleware.yaml.j2"
    rendered_middleware: "{{ files_dir }}/traefik-dashboard-middleware.yaml"
    ingressroute_template: "../templates/traefik/traefik-dashboard-ingressroute-internal.yaml.j2"
    rendered_ingressroute: "{{ files_dir }}/traefik-dashboard-ingressroute.yaml"
    tlsstore_template: "../templates/traefik/tlsstore-default.yaml.j2"
    rendered_tlsstore: "{{ files_dir }}/tlsstore-default.yaml"
    sealed_secret_path: "{{ files_dir }}/traefik-dashboard-sealed.yaml"

  ########################################################################
  # 0. Prerequisitos (binaries + values)
  ########################################################################
  pre_tasks:
    - name: 📋 Verificar kubectl / helm
      stat:
        path: "{{ item }}"
      loop:
        - "{{ kubectl_bin_path }}"
        - "{{ helm_bin_path }}"
      register: bin_checks
      changed_when: false

    - name: ❌ Faltan binarios obligatorios
      fail:
        msg: "Falta {{ item.stat.path }}"
      when: not item.stat.exists
      loop: "{{ bin_checks.results }}"

    - name: 📁 Crear directorio artefactos
      file:
        path: "{{ files_dir }}"
        state: directory
        mode: "0755"

    - name: 📄 Renderizar values de Helm
      template:
        src: "{{ traefik_values_template }}"
        dest: "{{ traefik_values_file }}"

  ########################################################################
  # 1. CRDs de Traefik (antes de Helm)
  ########################################################################
  tasks:
    - name: 📥 Instalar CRDs v3.4
      shell: |
        {{ kubectl_bin_path }} apply -f https://raw.githubusercontent.com/traefik/traefik/v3.4/docs/content/reference/dynamic-configuration/kubernetes-crd-definition-v1.yml
        {{ kubectl_bin_path }} apply -f https://raw.githubusercontent.com/traefik/traefik/v3.4/docs/content/reference/dynamic-configuration/kubernetes-crd-rbac.yml
      environment: { KUBECONFIG: "{{ kubeconfig_path }}" }

    - name: ⏳ Esperar CRDs clave
      shell: >
        {{ kubectl_bin_path }} get crd
        ingressroutes.traefik.io
        middlewares.traefik.io
        tlsstores.traefik.io
        serverstransports.traefik.io
        >/dev/null 2>&1
      retries: 20
      delay: 3
      register: crd_wait
      until: crd_wait.rc == 0
      environment: { KUBECONFIG: "{{ kubeconfig_path }}" }

    ########################################################################
    # 2. SealedSecret de basic-auth (antes del deployment)
    ########################################################################
    - name: 🔐 Aplicar SealedSecret basic-auth
      kubernetes.core.k8s:
        state: present
        src: "{{ sealed_secret_path }}"
        namespace: "{{ traefik_namespace }}"
        kubeconfig: "{{ kubeconfig_path }}"

    - name: 🔍 Confirmar SealedSecret
      kubernetes.core.k8s_info:
        api_version: bitnami.com/v1alpha1
        kind: SealedSecret
        name: "{{ traefik_dashboard_secret_name }}"
        namespace: "{{ traefik_namespace }}"
        kubeconfig: "{{ kubeconfig_path }}"
      register: ss_ready
      retries: 10
      delay: 3
      until: ss_ready.resources | length == 1

    ########################################################################
    # 3. Helm → Traefik
    ########################################################################
    - name: 📦 Helm upgrade/install Traefik
      shell: >
        {{ helm_bin_path }} upgrade --install {{ traefik_release_name }} traefik/traefik
        --namespace {{ traefik_namespace }} --create-namespace
        --version {{ traefik_chart_version }}
        --values {{ traefik_values_file }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
        PATH: "{{ env_path }}"

    - name: ⏳ Esperar rollout Traefik
      shell: >
        {{ kubectl_bin_path }} -n {{ traefik_namespace }}
        rollout status deployment/{{ traefik_release_name }} --timeout=180s
      environment: { KUBECONFIG: "{{ kubeconfig_path }}" }

    ########################################################################
    # 4. Secret real generado por el controller
    ########################################################################
    - name: ⏳ Esperar Secret traefik-dashboard-secret
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        name: "{{ traefik_dashboard_secret_name }}"
        namespace: "{{ traefik_namespace }}"
        kubeconfig: "{{ kubeconfig_path }}"
      register: real_secret
      retries: 30
      delay: 3
      until: real_secret.resources | length == 1

    ########################################################################
    # 5. Middleware + IngressRoute + TLSStore
    ########################################################################
    - name: 🔐 Renderizar Middleware
      template:
        src: "{{ middleware_template }}"
        dest: "{{ rendered_middleware }}"
      notify: apply_middleware

    - name: 🌐 Renderizar IngressRoute
      template:
        src: "{{ ingressroute_template }}"
        dest: "{{ rendered_ingressroute }}"
      notify: apply_ingress

    - name: 📄 Renderizar TLSStore
      template:
        src: "{{ tlsstore_template }}"
        dest: "{{ rendered_tlsstore }}"
      notify: apply_tlsstore

  ########################################################################
  # 6. Smoke-test
  ########################################################################
  post_tasks:
    - name: 🌐 Probar dashboard (200/302/401)
      shell: >
        curl --cacert {{ files_dir }}/certs/ca-root.crt
             -u {{ traefik_auth_user }}:{{ traefik_auth_pass }}
             https://{{ internal_domain }}/dashboard/
             --max-time 10 --silent --output /dev/null --write-out '%{http_code}'
      register: dash_code
      retries: 6
      delay: 5
      until: dash_code.stdout | int in [200,302,401]
      environment:
        PATH: "{{ env_path }}"
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: ✅ Resultado final
      debug:
        msg: "Dashboard responde con código {{ dash_code.stdout }} — ¡todo OK!"

  ########################################################################
  # Handlers
  ########################################################################
  handlers:
    - name: apply_middleware
      kubernetes.core.k8s:
        state: present
        src: "{{ rendered_middleware }}"
        namespace: "{{ traefik_namespace }}"
        kubeconfig: "{{ kubeconfig_path }}"

    - name: apply_ingress
      kubernetes.core.k8s:
        state: present
        src: "{{ rendered_ingressroute }}"
        namespace: "{{ traefik_namespace }}"
        kubeconfig: "{{ kubeconfig_path }}"

    - name: apply_tlsstore
      kubernetes.core.k8s:
        state: present
        src: "{{ rendered_tlsstore }}"
        kubeconfig: "{{ kubeconfig_path }}"
