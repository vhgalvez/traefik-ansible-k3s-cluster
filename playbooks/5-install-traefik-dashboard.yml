# playbooks/5-install-traefik-dashboard.yml
# ========================================================
# 🚀 Instalar Traefik con Dashboard interno protegido
# ========================================================

- name: 🚀 Instalar Traefik con Dashboard interno protegido
  hosts: localhost
  gather_facts: false
  become: false

  vars_files:
    - ../vars/main.yml

  vars:
    kubeconfig_path: "/home/victory/.kube/config"
    helm_bin_path: "/usr/local/bin/helm"
    kubectl_bin_path: "/usr/local/bin/kubectl"
    env_path: "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
    files_dir: "{{ playbook_dir }}/files"

    # Plantillas y rutas de destino
    traefik_values_template:    "../templates/traefik/values_pvc.yaml.j2"
    traefik_values_file:        "{{ files_dir }}/traefik-values.yaml"
    middleware_template:        "../templates/traefik/traefik-dashboard-middleware.yaml.j2"
    rendered_middleware:        "{{ files_dir }}/traefik-dashboard-middleware.yaml"
    ingressroute_template:      "../templates/traefik/traefik-dashboard-ingressroute-internal.yaml.j2"
    rendered_ingressroute:      "{{ files_dir }}/traefik-dashboard-ingressroute.yaml"
    tlsstore_template:          "../templates/traefik/tlsstore-default.yaml.j2"
    rendered_tlsstore:          "{{ files_dir }}/tlsstore-default.yaml"
    sealed_secret_path:         "{{ files_dir }}/traefik-dashboard-sealed.yaml"

  tasks:
    - name: 📋 Comprobar kubectl instalado
      stat:
        path: "{{ kubectl_bin_path }}"
      register: kubectl_check

    - name: ❌ kubectl no instalado
      fail:
        msg: "kubectl no está en {{ kubectl_bin_path }}"
      when: not kubectl_check.stat.exists

    - name: 📋 Comprobar helm instalado
      stat:
        path: "{{ helm_bin_path }}"
      register: helm_check

    - name: ❌ helm no instalado
      fail:
        msg: "helm no está en {{ helm_bin_path }}"
      when: not helm_check.stat.exists

    - name: 📁 Crear directorio de archivos renderizados
      file:
        path: "{{ files_dir }}"
        state: directory
        mode: "0755"

    # 1) Valores de Helm
    - name: 📄 Renderizar traefik-values.yaml
      template:
        src: "{{ traefik_values_template }}"
        dest: "{{ traefik_values_file }}"

    # 2) CRDs de Traefik
    - name: 📥 Instalar CRDs oficiales de Traefik
      shell: |
        curl -sSfL https://raw.githubusercontent.com/traefik/traefik/v3.0/docs/content/reference/dynamic-configuration/kubernetes-crd-definition-v1.yml \
        | {{ kubectl_bin_path }} apply -f -
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: ⏳ Esperar a que los CRDs de Traefik estén listos
      shell: |
        until {{ kubectl_bin_path }} get crd ingressroutes.traefik.io >/dev/null 2>&1; do sleep 2; done
      retries: 5
      delay: 2
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    # 3) Helm install/upgrade Traefik
    - name: 📦 Instalar/actualizar Traefik via Helm
      shell: >
        {{ helm_bin_path }} upgrade --install {{ traefik_release_name }} traefik/traefik
        --namespace {{ traefik_namespace }} --create-namespace
        --version {{ traefik_chart_version }} --values {{ traefik_values_file }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
        PATH: "{{ env_path }}"

    - name: ⏳ Esperar despliegue de Traefik
      shell: >
        {{ kubectl_bin_path }} rollout status deployment/{{ traefik_release_name }} -n {{ traefik_namespace }} --timeout=120s
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    # 4) Middleware de basicAuth
    - name: 🔐 Renderizar Middleware basicAuth
      template:
        src: "{{ middleware_template }}"
        dest: "{{ rendered_middleware }}"

    - name: 🚀 Aplicar Middleware basicAuth
      kubernetes.core.k8s:
        state: present
        src: "{{ rendered_middleware }}"
        namespace: "{{ traefik_namespace }}"
        kubeconfig: "{{ kubeconfig_path }}"

    # 5) IngressRoute del Dashboard
    - name: 🌐 Renderizar IngressRoute del Dashboard
      template:
        src: "{{ ingressroute_template }}"
        dest: "{{ rendered_ingressroute }}"

    - name: 🚀 Aplicar IngressRoute del Dashboard
      kubernetes.core.k8s:
        state: present
        src: "{{ rendered_ingressroute }}"
        namespace: "{{ traefik_namespace }}"
        kubeconfig: "{{ kubeconfig_path }}"

    # 6) TLSStore global
    - name: 📄 Renderizar TLSStore
      template:
        src: "{{ tlsstore_template }}"
        dest: "{{ rendered_tlsstore }}"

    - name: 🚀 Aplicar TLSStore global
      kubernetes.core.k8s:
        state: present
        src: "{{ rendered_tlsstore }}"
        kubeconfig: "{{ kubeconfig_path }}"

    # 7) Smoke-test al Dashboard
    - name: 🌐 Probar acceso al dashboard (200/302/401 aceptables)
      shell: >
        curl --cacert {{ files_dir }}/certs/ca-root.crt
        -u {{ traefik_auth_user }}:{{ traefik_auth_pass }}
        https://{{ internal_domain }}/dashboard/
        --max-time 10 --silent --output /dev/null --write-out '%{http_code}'
      register: dashboard_http
      retries: 6
      delay: 5
      until: dashboard_http.stdout in ['200','302','401']
      environment:
        PATH: "{{ env_path }}"
        KUBECONFIG: "{{ kubeconfig_path }}"