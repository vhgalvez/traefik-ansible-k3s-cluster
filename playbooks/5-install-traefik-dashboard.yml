# ========================================================
#  Instalar Traefik con dashboard interno protegido
# Usa certificados y secretos generados en la fase 1.
# Despliega Traefik con autenticación y dashboard local.
# ========================================================

- name: 🚀 Instalar Traefik con Dashboard interno protegido
  hosts: localhost
  gather_facts: false
  become: false

  vars_files:
    - ../vars/main.yml

  vars:
    kubeconfig_path: "/home/victory/.kube/config"
    helm_bin_path: "/usr/local/bin/helm"
    kubectl_bin_path: "/usr/local/bin/kubectl"
    env_path: "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
    files_dir: "{{ playbook_dir }}/files"
    traefik_values_file: "{{ files_dir }}/traefik-values.yaml"
    sealed_secret_path: "{{ files_dir }}/traefik-dashboard-sealed.yaml"
    traefik_values_template: "../templates/traefik/values_pvc.yaml.j2"
    ingressroute_template: "../templates/traefik/traefik-dashboard-ingressroute-internal.yaml.j2"
    rendered_ingressroute: "{{ files_dir }}/traefik-dashboard-ingressroute.yaml"
    middleware_template: "../templates/traefik/traefik-dashboard-middleware.yaml.j2"
    rendered_middleware: "{{ files_dir }}/traefik-dashboard-middleware.yaml"
    rendered_tlsstore_file: "{{ files_dir }}/tlsstore-default.yaml"  # Archivo renderizado de tlsstore-default.yaml

  tasks:
    - name: 📁 Asegurar directorio local files/
      ansible.builtin.file:
        path: "{{ files_dir }}"
        state: directory
        mode: "0755"

    - name: 📄 Renderizar values.yaml desde plantilla
      ansible.builtin.template:
        src: "{{ traefik_values_template }}"
        dest: "{{ traefik_values_file }}"

    # 🧹 Limpieza: eliminar Traefik por defecto si quedó instalado
    - name: 🧼 Verificar y eliminar Traefik por defecto
      block:
        - name: 🔍 Buscar Deployment por release name
          ansible.builtin.shell: >
            {{ kubectl_bin_path }} get deployment {{ traefik_release_name }} -n {{ traefik_namespace }}
          environment:
            KUBECONFIG: "{{ kubeconfig_path }}"
            PATH: "{{ env_path }}"
          register: traefik_deploy_check
          failed_when: false
          changed_when: false

        - name: ❌ Eliminar Deployment si existe
          ansible.builtin.shell: >
            {{ kubectl_bin_path }} delete deployment {{ traefik_release_name }} -n {{ traefik_namespace }}
          environment:
            KUBECONFIG: "{{ kubeconfig_path }}"
          when: traefik_deploy_check.rc == 0

        - name: 🔍 Buscar HelmChart traefik en kube-system (solo si K3s instaló uno por defecto)
          ansible.builtin.shell: >
            {{ kubectl_bin_path }} get helmchart traefik -n {{ traefik_namespace }}
          environment:
            KUBECONFIG: "{{ kubeconfig_path }}"
          register: k3s_helmchart_status
          failed_when: false
          changed_when: false

        - name: ❌ Eliminar HelmChart si existe
          ansible.builtin.shell: >
            {{ kubectl_bin_path }} delete helmchart traefik -n {{ traefik_namespace }}
          environment:
            KUBECONFIG: "{{ kubeconfig_path }}"
          when: k3s_helmchart_status.rc == 0

    # ➕ Añadir repositorio Helm de Traefik
    - name: ➕ Añadir repositorio Helm de Traefik
      ansible.builtin.shell: >
        {{ helm_bin_path }} repo add traefik https://traefik.github.io/charts &&
        {{ helm_bin_path }} repo update
      environment:
        PATH: "{{ env_path }}"

    # 📥 Aplicar Secret sellado de autenticación
    - name: 📥 Aplicar Secret sellado (auth)
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        src: "{{ sealed_secret_path }}"
        namespace: "{{ traefik_namespace }}"
      when: sealed_secret_path is defined and lookup('file', sealed_secret_path, errors='ignore') is not none

    - name: ⏳ Esperar Secret desencriptado
      ansible.builtin.shell: >
        {{ kubectl_bin_path }} -n {{ traefik_namespace }} get secret {{ traefik_dashboard_secret_name }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: wait_for_secret
      retries: 6
      delay: 5
      until: wait_for_secret.rc == 0

    - name: 📥 Descargar e instalar CRDs oficiales de Traefik v3.0
      ansible.builtin.shell: |
        set -euo pipefail
        curl -sSfL https://raw.githubusercontent.com/traefik/traefik/v3.0/docs/content/reference/dynamic-configuration/kubernetes-crd-definition-v1.yml | kubectl apply -f -
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      changed_when: true

    # 📦 Instalar Traefik desde Helm Chart
    - name: 📦 Instalar Traefik desde Helm Chart
      ansible.builtin.shell: >
        {{ helm_bin_path }} upgrade --install {{ traefik_release_name }} traefik/traefik --namespace {{ traefik_namespace }} --create-namespace --version {{ traefik_chart_version }} --values {{ traefik_values_file }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
        PATH: "{{ env_path }}"

    - name: ⏳ Esperar despliegue de Traefik
      ansible.builtin.shell: >
        {{ kubectl_bin_path }} rollout status deploy/{{ traefik_release_name }} -n {{ traefik_namespace }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    # 🌐 Renderizar y aplicar IngressRoute del Dashboard
    - name: 🌐 Renderizar IngressRoute del Dashboard
      ansible.builtin.template:
        src: "{{ ingressroute_template }}"
        dest: "{{ rendered_ingressroute }}"

    - name: 🚀 Aplicar IngressRoute del Dashboard
      kubernetes.core.k8s:
        state: present
        namespace: "{{ traefik_namespace }}"
        src: "{{ rendered_ingressroute }}"
        kubeconfig: "{{ kubeconfig_path }}"

    # 🌐 Renderizar y aplicar Middleware de Autenticación
    - name: 🌐 Renderizar Middleware de Autenticación
      ansible.builtin.template:
        src: "{{ middleware_template }}"
        dest: "{{ rendered_middleware }}"

    - name: 🚀 Aplicar Middleware de Autenticación
      kubernetes.core.k8s:
        state: present
        namespace: "{{ traefik_namespace }}"
        src: "{{ rendered_middleware }}"
        kubeconfig: "{{ kubeconfig_path }}"

    # 🚀 Renderizar y aplicar TLSStore global
    - name: 📄 Renderizar TLSStore desde plantilla
      ansible.builtin.template:
        src: "{{ playbook_dir }}/templates/traefik/tlsstore-default.yaml.j2"
        dest: "{{ rendered_tlsstore_file }}"

    - name: 🚀 Aplicar TLSStore global
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        src: "{{ rendered_tlsstore_file }}"
        remote_src: no