# playbooks/5-install-traefik-dashboard.yml
# ========================================================
# 🚀 Instalar Traefik con Dashboard interno protegido
# ========================================================

- name: 🚀 Instalar Traefik con Dashboard interno protegido
  hosts: localhost
  gather_facts: false
  become: false

  vars_files:
    - ../vars/main.yml

  vars:
    kubeconfig_path: "/home/victory/.kube/config"
    helm_bin_path: "/usr/local/bin/helm"
    kubectl_bin_path: "/usr/local/bin/kubectl"
    env_path: "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
    files_dir: "{{ playbook_dir }}/files"
    traefik_values_file: "{{ files_dir }}/traefik-values.yaml"
    sealed_secret_path: "{{ files_dir }}/traefik-dashboard-sealed.yaml"
    traefik_values_template: "../templates/traefik/values_pvc.yaml.j2"
    ingressroute_template: "../templates/traefik/traefik-dashboard-ingressroute-internal.yaml.j2"
    rendered_ingressroute: "{{ files_dir }}/traefik-dashboard-ingressroute.yaml"
    middleware_template: "../templates/traefik/traefik-dashboard-middleware.yaml.j2"
    rendered_middleware: "{{ files_dir }}/traefik-dashboard-middleware.yaml"
    strip_prefix_middleware_template: "../templates/traefik/traefik-dashboard-stripprefix-middleware.yaml.j2"
    rendered_strip_prefix_middleware: "{{ files_dir }}/traefik-dashboard-stripprefix-middleware.yaml"
    tlsstore_template: "../templates/traefik/tlsstore-default.yaml.j2"
    rendered_tlsstore_file: "{{ files_dir }}/tlsstore-default.yaml"

  tasks:
    - name: 📋 Verificar si kubectl está instalado
      stat:
        path: "{{ kubectl_bin_path }}"
      register: kubectl_check

    - name: ❌ Abortamos si kubectl no está instalado
      fail:
        msg: "❌ kubectl no está instalado en {{ kubectl_bin_path }}."
      when: not kubectl_check.stat.exists

    - name: 📋 Verificar si helm está instalado
      stat:
        path: "{{ helm_bin_path }}"
      register: helm_check

    - name: ❌ Abortamos si helm no está instalado
      fail:
        msg: "❌ helm no está instalado en {{ helm_bin_path }}."
      when: not helm_check.stat.exists

    - name: 📁 Asegurar directorio {{ files_dir }}
      file:
        path: "{{ files_dir }}"
        state: directory
        mode: "0755"

    - name: 📄 Renderizar traefik-values.yaml
      template:
        src: "{{ traefik_values_template }}"
        dest: "{{ traefik_values_file }}"

    - name: 🧼 Verificar y eliminar Traefik preinstalado por K3s
      block:
        - name: 🔍 Verificar Deployment traefik
          shell: >
            {{ kubectl_bin_path }} get deployment {{ traefik_release_name }} -n {{ traefik_namespace }}
          environment:
            KUBECONFIG: "{{ kubeconfig_path }}"
          register: traefik_deploy_check
          failed_when: false
          changed_when: false

        - name: ❌ Eliminar Deployment traefik
          shell: >
            {{ kubectl_bin_path }} delete deployment {{ traefik_release_name }} -n {{ traefik_namespace }} --wait=true --timeout=60s
          environment:
            KUBECONFIG: "{{ kubeconfig_path }}"
          when: traefik_deploy_check.rc == 0

        - name: 🔍 Verificar HelmChart traefik de K3s
          shell: >
            {{ kubectl_bin_path }} get helmchart traefik -n {{ traefik_namespace }}
          environment:
            KUBECONFIG: "{{ kubeconfig_path }}"
          register: k3s_helmchart_check
          failed_when: false
          changed_when: false

        - name: ❌ Eliminar HelmChart traefik de K3s
          shell: >
            {{ kubectl_bin_path }} delete helmchart traefik -n {{ traefik_namespace }} --wait=true --timeout=60s
          environment:
            KUBECONFIG: "{{ kubeconfig_path }}"
          when: k3s_helmchart_check.rc == 0

    - name: ➕ Añadir repositorio Helm de Traefik
      shell: >
        {{ helm_bin_path }} repo add traefik https://traefik.github.io/charts &&
        {{ helm_bin_path }} repo update
      environment:
        PATH: "{{ env_path }}"

    - name: 🔐 Aplicar Secret sellado (auth)
      kubernetes.core.k8s:
        state: present
        src: "{{ sealed_secret_path }}"
        namespace: "{{ traefik_namespace }}"
        kubeconfig: "{{ kubeconfig_path }}"
      when: sealed_secret_path is defined and lookup('file', sealed_secret_path, errors='ignore') is not none

    - name: 📥 Instalar CRDs oficiales Traefik v3.0
      shell: |
        curl -sSfL https://raw.githubusercontent.com/traefik/traefik/v3.0/docs/content/reference/dynamic-configuration/kubernetes-crd-definition-v1.yml | {{ kubectl_bin_path }} apply -f -
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      changed_when: true

    - name: 📦 Instalar Traefik desde Helm
      shell: >
        {{ helm_bin_path }} upgrade --install {{ traefik_release_name }} traefik/traefik
        --namespace {{ traefik_namespace }}
        --create-namespace
        --version {{ traefik_chart_version }}
        --values {{ traefik_values_file }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
        PATH: "{{ env_path }}"

    - name: ⏳ Esperar despliegue Traefik
      shell: >
        {{ kubectl_bin_path }} rollout status deployment/{{ traefik_release_name }} -n {{ traefik_namespace }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: 🔐 Renderizar Middleware de Autenticación
      template:
        src: "{{ middleware_template }}"
        dest: "{{ rendered_middleware }}"

    - name: 🚀 Aplicar Middleware de Autenticación
      kubernetes.core.k8s:
        state: present
        namespace: "{{ traefik_namespace }}"
        src: "{{ rendered_middleware }}"
        kubeconfig: "{{ kubeconfig_path }}"

    - name: 🔐 Renderizar Middleware de StripPrefix para Dashboard
      template:
        src: "{{ strip_prefix_middleware_template }}"
        dest: "{{ rendered_strip_prefix_middleware }}"

    - name: 🚀 Aplicar Middleware de StripPrefix para Dashboard
      kubernetes.core.k8s:
        state: present
        namespace: "{{ traefik_namespace }}"
        src: "{{ rendered_strip_prefix_middleware }}"
        kubeconfig: "{{ kubeconfig_path }}"

    - name: 🌐 Renderizar IngressRoute del Dashboard
      template:
        src: "{{ ingressroute_template }}"
        dest: "{{ rendered_ingressroute }}"

    - name: 🚀 Aplicar IngressRoute del Dashboard
      kubernetes.core.k8s:
        state: present
        namespace: "{{ traefik_namespace }}"
        src: "{{ rendered_ingressroute }}"
        kubeconfig: "{{ kubeconfig_path }}"

    - name: 📄 Renderizar TLSStore global
      template:
        src: "{{ tlsstore_template }}"
        dest: "{{ rendered_tlsstore_file }}"

    - name: 🚀 Aplicar TLSStore global
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        src: "{{ rendered_tlsstore_file }}"

    - name: 🌐 Probar acceso al dashboard (200 / 302 / 401 aceptables)
      shell: >
        curl --cacert {{ files_dir }}/certs/ca-root.crt
        -u {{ traefik_auth_user }}:{{ traefik_auth_pass }}
        https://{{ internal_domain }}/dashboard/
        --max-time 10 --silent --output /dev/null --write-out '%{http_code}'
      register: dashboard_http_code
      retries: 6
      delay: 5
      until: dashboard_http_code.stdout in ['200','302','401']